var documenterSearchIndex = {"docs":
[{"location":"methods/#Graphs","page":"Methods","title":"Graphs","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Methods for using/analyzing the network model as a graph","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"make_graph\nleaf_busses","category":"page"},{"location":"methods/#CommonOPF.make_graph","page":"Methods","title":"CommonOPF.make_graph","text":"make_graph(edges::AbstractVector)\n\nreturn SimpleDiGraph by inferring busses from edges with the dicts for bus => int and int => bus (because Graphs.jl only works with integer nodes)\n\njulia> g[\"13\", :bus]\n10\n\njulia> g[13, :bus]\n\"24\"\n\njulia> get_prop(g, :int_bus_map)[13]\n\"24\"\n\n\n\n\n\nmake_graph(busses::AbstractVector{String}, edges::AbstractVector)\n\nreturn SimpleDiGraph with the dicts for bus => int and int => bus (because Graphs.jl only works with integer nodes)\n\njulia> g[\"13\", :bus]\n10\n\njulia> g[13, :bus]\n\"24\"\n\njulia> get_prop(g, :int_bus_map)[13]\n\"24\"\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.leaf_busses","page":"Methods","title":"CommonOPF.leaf_busses","text":"leaf_busses(p::Inputs)\n\nreturns Vector{String} containing all of the leaf busses in p.busses\n\n\n\n\n\n","category":"function"},{"location":"methods/#IO-methods","page":"Methods","title":"IO methods","text":"","category":"section"},{"location":"methods/#Inputs","page":"Methods","title":"Inputs","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"remove_bus!(j::String, p::Inputs{SinglePhase})\nremove_bus!(j::String, p::Inputs{MultiPhase})\nreduce_tree!(p::Inputs{SinglePhase})\nreduce_tree!(p::Inputs{MultiPhase})","category":"page"},{"location":"methods/#CommonOPF.remove_bus!-Tuple{String, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.remove_bus!","text":"remove_bus!(j::String, p::Inputs{SinglePhase})\n\nRemove bus j in the line i->j->k from the model by making an equivalent line from busses i->k\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.remove_bus!-Tuple{String, Inputs{MultiPhase}}","page":"Methods","title":"CommonOPF.remove_bus!","text":"remove_bus!(j::String, p::Inputs{MultiPhase})\n\nRemove bus j in the line i->j->k from the model by making an equivalent line from busses i->k\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.reduce_tree!-Tuple{Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.reduce_tree!","text":"reduce_tree!(p::Inputs{SinglePhase})\n\ncombine any line sets with intermediate busses that have indegree == outdegree == 1 and is not a load bus into a single line\n\nSee remove_bus! for how the two lines are combined.\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.reduce_tree!-Tuple{Inputs{MultiPhase}}","page":"Methods","title":"CommonOPF.reduce_tree!","text":"reduce_tree!(p::Inputs{MultiPhase})\n\ncombine any line sets with intermediate busses that satisfy      1. indegree == outdegree == 1     2. is not a load bus and      3. has same phases in as out  into a single line.\n\nSee remove_bus! for how the two lines are combined.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Types","page":"Methods","title":"Types","text":"","category":"section"},{"location":"methods/#Utils","page":"Methods","title":"Utils","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"trim_tree!\ntrim_tree_once!\nrij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\nxij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})","category":"page"},{"location":"methods/#CommonOPF.trim_tree!","page":"Methods","title":"CommonOPF.trim_tree!","text":"trim_tree!(p::Inputs)\n\nTrim any branches that do not contain load busses.\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.trim_tree_once!","page":"Methods","title":"CommonOPF.trim_tree_once!","text":"trim_tree_once!(p::Inputs)\n\nA support function for trim_tree!. When trimming the tree sometimes new leafs are created.  So trim_tree! loops over trim_tree_once!.\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.rij-Tuple{AbstractString, AbstractString, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.rij","text":"rij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\n\nThe per-unit resistance of line i->j\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.xij-Tuple{AbstractString, AbstractString, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.xij","text":"xij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\n\nThe per-unit reacttance of line i->j\n\n\n\n\n\n","category":"method"},{"location":"#CommonOPF.jl","page":"User Documentation","title":"CommonOPF.jl","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Documentation for CommonOPF.jl a module of shared scaffolding and methods for:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"BranchFlowModel\nLinDistFlow\nLinearPowerFlow","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"The common methods and types are organized into categories by files:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"io.jl contains methods for parsing OpenDSS models into Inputs\ninputs.jl contains the Inputs constructor methods and the Inputs struct \ngraphs.jl contains methods for making and analyzing directed graph models of the power systems\ntypes.jl contains abstract types and concrete type templates\nutils.jl contains supporting functions for building models from Inputs","category":"page"}]
}

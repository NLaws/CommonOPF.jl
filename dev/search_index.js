var documenterSearchIndex = {"docs":
[{"location":"methods/#Graphs","page":"Methods","title":"Graphs","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Methods for using/analyzing the network model as a graph","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"make_graph\nleaf_busses","category":"page"},{"location":"methods/#CommonOPF.make_graph","page":"Methods","title":"CommonOPF.make_graph","text":"make_graph(edges::AbstractVector)\n\nreturn SimpleDiGraph by inferring busses from edges with the dicts for bus => int and int => bus (because Graphs.jl only works with integer nodes)\n\njulia> g[\"13\", :bus]\n10\n\njulia> g[13, :bus]\n\"24\"\n\njulia> get_prop(g, :int_bus_map)[13]\n\"24\"\n\n\n\n\n\nmake_graph(busses::AbstractVector{String}, edges::AbstractVector)\n\nreturn SimpleDiGraph with the dicts for bus => int and int => bus (because Graphs.jl only works with integer nodes)\n\njulia> g[\"13\", :bus]\n10\n\njulia> g[13, :bus]\n\"24\"\n\njulia> get_prop(g, :int_bus_map)[13]\n\"24\"\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.leaf_busses","page":"Methods","title":"CommonOPF.leaf_busses","text":"leaf_busses(p::Inputs)\n\nreturns Vector{String} containing all of the leaf busses in p.busses\n\n\n\n\n\n","category":"function"},{"location":"methods/#IO-methods","page":"Methods","title":"IO methods","text":"","category":"section"},{"location":"methods/#Inputs","page":"Methods","title":"Inputs","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"remove_bus!(j::String, p::Inputs{SinglePhase})\nremove_bus!(j::String, p::Inputs{MultiPhase})\nreduce_tree!(p::Inputs{SinglePhase})\nreduce_tree!(p::Inputs{MultiPhase})","category":"page"},{"location":"methods/#CommonOPF.remove_bus!-Tuple{String, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.remove_bus!","text":"remove_bus!(j::String, p::Inputs{SinglePhase})\n\nRemove bus j in the line i->j->k from the model by making an equivalent line from busses i->k\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.remove_bus!-Tuple{String, Inputs{MultiPhase}}","page":"Methods","title":"CommonOPF.remove_bus!","text":"remove_bus!(j::String, p::Inputs{MultiPhase})\n\nRemove bus j in the line i->j->k from the model by making an equivalent line from busses i->k\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.reduce_tree!-Tuple{Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.reduce_tree!","text":"reduce_tree!(p::Inputs{SinglePhase})\n\ncombine any line sets with intermediate busses that have indegree == outdegree == 1 and is not a load bus into a single line\n\nSee remove_bus! for how the two lines are combined.\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.reduce_tree!-Tuple{Inputs{MultiPhase}}","page":"Methods","title":"CommonOPF.reduce_tree!","text":"reduce_tree!(p::Inputs{MultiPhase})\n\ncombine any line sets with intermediate busses that satisfy      1. indegree == outdegree == 1     2. is not a load bus and      3. has same phases in as out  into a single line.\n\nSee remove_bus! for how the two lines are combined.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Types","page":"Methods","title":"Types","text":"","category":"section"},{"location":"methods/#Utils","page":"Methods","title":"Utils","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"trim_tree!\ntrim_tree_once!\nrij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\nxij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})","category":"page"},{"location":"methods/#CommonOPF.trim_tree!","page":"Methods","title":"CommonOPF.trim_tree!","text":"trim_tree!(p::Inputs)\n\nTrim any branches that do not contain load busses.\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.trim_tree_once!","page":"Methods","title":"CommonOPF.trim_tree_once!","text":"trim_tree_once!(p::Inputs)\n\nA support function for trim_tree!. When trimming the tree sometimes new leafs are created.  So trim_tree! loops over trim_tree_once!.\n\n\n\n\n\n","category":"function"},{"location":"methods/#CommonOPF.rij-Tuple{AbstractString, AbstractString, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.rij","text":"rij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\n\nThe per-unit resistance of line i->j\n\n\n\n\n\n","category":"method"},{"location":"methods/#CommonOPF.xij-Tuple{AbstractString, AbstractString, Inputs{SinglePhase}}","page":"Methods","title":"CommonOPF.xij","text":"xij(i::AbstractString, j::AbstractString, p::Inputs{SinglePhase})\n\nThe per-unit reacttance of line i->j\n\n\n\n\n\n","category":"method"},{"location":"#CommonOPF.jl","page":"User Documentation","title":"CommonOPF.jl","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Documentation for CommonOPF.jl a module of shared scaffolding and methods for:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"BranchFlowModel\nLinDistFlow\nLinearPowerFlow","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"The common methods and types are organized into categories by files:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"io.jl contains methods for parsing OpenDSS models into Inputs\ninputs.jl contains the Inputs constructor methods and the Inputs struct \ngraphs.jl contains methods for making and analyzing directed graph models of the power systems\ntypes.jl contains abstract types and concrete type templates\nutils.jl contains supporting functions for building models from Inputs","category":"page"},{"location":"network/#Network-Model","page":"The Network Model","title":"Network Model","text":"","category":"section"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"The Network struct in CommonOPF is used to abstract the power system network into the components required to create power flow and optimal power flow models. Underlying the Network model is a MetaGraphsNext.MetaGraph that stores the edge and node data in the network. ","category":"page"},{"location":"network/#Graph-Edges","page":"The Network Model","title":"Graph Edges","text":"","category":"section"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"The edges of the network model include all power transfer elements, i.e. the devices in the power  system that move power from one place to another and therefore have two or more busses. Edges include:","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"conductors","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"Within the graph model edges are indexed via two-tuples of bus names.","category":"page"},{"location":"network/#Conductors","page":"The Network Model","title":"Conductors","text":"","category":"section"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"Conductors are specified via two busses, the impedance in ohms per-unit length, and a length value.","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"conductors:\n  - busses: \n    - b1\n    - b2\n    r0: 0.1\n    x0: 0.1\n    length: 100","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"A conductor can also leverage a template, i.e. another conductor with a name that matches the template value so that we can re-use the impedance values:","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"conductors:\n  - name: cond1\n    busses: \n    - b1\n    - b2\n    r0: 0.1\n    x0: 0.1\n    length: 100\n  - busses:\n    - b2\n    - b3\n    template: cond1\n    length: 200","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"The second conductor in the conductors above will use the r0 and x0 values from cond1, scaled by the length of 200 and normalized by Zbase.","category":"page"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"note: Note\nThe name field is optional unless a conductor.name is also the template of another conductor.","category":"page"},{"location":"network/#Graph-Nodes","page":"The Network Model","title":"Graph Nodes","text":"","category":"section"},{"location":"network/","page":"The Network Model","title":"The Network Model","text":"The abstract node in the graph model is really an electrical bus. In single phase models a bus and a node are synonymous. However, in multi-phase models we can think of each bus have multiple nodes, or terminals, where each phase-wire connects. Busses are implicitly specified in the busses of the edge specifications.","category":"page"}]
}
